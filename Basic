



======================================= VERIABLE =================================
State Variables − Variables whose values are permanently stored in a contract storage.
Local Variables − Variables whose values are present till function is executing.
Global Variables − Special variables exists in the global namespace used to get information about the blockchain.


================================== STATE AND LOCAL VERIABLE =========================================

pragma solidity ^0.5.0;
contract SolidityTest {
   uint storedData; // State variable
   constructor() public {
      storedData = 10;   
   }
   function getResult() public view returns(uint){
      uint a = 1; // local variable
      uint b = 2;
      uint result = a + b;
      return storedData; //access the state variable
   }
}




================================== GLOBAL VERIABLE =========================================
**Gas = fee (required for successfully conducting a transaction or executing a contract on the Ethereum blockchain platform).

Hash of the given block(only works for 256 most recent, excluding current, blocks)  = blockhash(uint blockNumber) returns (bytes32)	
Current block miner's address                          = block.coinbase (address payable)	
Current block difficulty                               = block.difficulty (uint)	
Current block gaslimit                                 = block.gaslimit (uint)	
Current block number                                   = block.number (uint)	
Current block timestamp as seconds since unix epoch    = block.timestamp (uint)	
Remaining gas                                          = gasleft() returns (uint256)	
Complete calldata                                      = msg.data (bytes calldata)	
Sender of the message (current caller)                 = msg.sender (address payable)	
First four bytes of the calldata (function identifier) = msg.sig (bytes4)	
Number of wei sent with the message                    = msg.value (uint)	
Current block timestamp                                = now (uint)	
Gas price of the transaction                           = tx.gasprice (uint)	
Sender of the transaction                              = tx.origin (address payable)	

--------eXample -------------------
pragma solidity ^0.5.0;

contract LedgerBalance {
   mapping(address => uint) public balances;

   function updateBalance(uint newBalance) public {
      balances[msg.sender] = newBalance;
   }
}
contract Updater {
   function updateBalance() public returns (uint) {
      LedgerBalance ledgerBalance = new LedgerBalance();
      ledgerBalance.updateBalance(10);
      return ledgerBalance.balances(address(this));
   }
}




============================================== UNITs ================================================
In solidity we can use wei, finney, szabo or ether as a suffix to a literal to be used to convert various ether based denominations. 
Lowest unit is wei and 1e12 represents 1 x 1012.

assert(1 wei == 1);
assert(1 szabo == 1e12);
assert(1 finney == 1e15);
assert(1 ether == 1e18);
assert(2 ether == 2000 fenny);






--





