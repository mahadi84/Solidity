Date: 11 June 2024


01. How many Data Types are there in Solidity? What are the differences among them?
02. How many types of Variables are there? Differences/Advantages among State, Local, and Global Varibale? Where data of local variables are stored?
03. What is Visibility Private, Public and Internal?

04. What is Array and how it works? how to define Array Push?
05. How does IF...ELSE statement work? How to define a Tenary operator?
06. Loop: FOR

07. How to define CONSTRUCT() 
08. How to return multiple values?
09. Difference among Required, Revert, and Assert?

10. Difference between views and pure in solidity??


=================== 01. How many Data Types are there in Solidity? What are the differences among them? =============================

VALUE TYPES:  
store their data directly in the memory they own.expand_more This means that whenever a value type variable is used in a function argument or assignment, a copy of the variable is created.expand_more There are eight basic value types in Solidity:

int           -Signed integers: These can store both positive and negative whole numbers.expand_more
unit          -Unsigned integers: These can only store non-negative whole numbers.
bool          -Booleans : These can only be true or false.
address       -Addresses: These represent a 20-byte Ethereum address.expand_more
bytes         -Byte arrays: These store a raw sequence of bytes.
fixed/ufixed  -Fixed-point numbers : These are used for decimal values with a limited precision.

Enums         -These are user-defined types that consist of a set of named constant values.
Literal types: These represent specific literal values, like numbers or strings.exclamation

REFERENCE TYPES:
store data in a separate location in memory and use a reference (like a pointer) to access that data. This means that multiple variables can refer to the same data location.expand_more Reference types in Solidity include:

Arrays: These are ordered collections of elements of the same data type.expand_more
Strings: These are similar to byte arrays but represent UTF-8 encoded text.exclamation
Structs: These are user-defined types that group together variables of different types.
Mappings: These are key-value pairs where the key can be of any data type (except for mappings) and the value can be of any data type.
Contract types: These refer to other Solidity contracts.

=================== 02. How many types of Variables are there? Differences/Advantages among State, Local, and Global Varibale? Where data of local variables are stored? =============================
State Variables − Variables whose values are permanently stored in a contract storage
Local Variables − Variables whose values are present till function is executing.
Global Variables − Special variables exists in the global namespace used to get information about the 


=================== 03. What is Visibility Private, Public and Internal? ==========================================
Public: Public variables are accessible both within the contract and from external contracts. Solidity automatically generates a getter function for public state variables.
Private: Private variables are only accessible within the contract where they are defined. They remain hidden from derived contracts or external contracts.
Internal: Internal variables are accessible within the contract where they are defined and also from derived contracts. However, they are not accessible from external contracts.
External: External functions can only be called externally (from outside the contract). They cannot be accessed within the contract itself.

=================== 04. What is Array and how it work? how to define Array Push? =============================
Fixed-size arrays: Declared with a specific size.
uint[5] fixedArray;  // An array of 5 unsigned integers

Dynamic arrays: Declared without a specific size.
uint[] dynamicArray;  // A dynamic array of unsigned integers
dynamicArray.push(1);  // Adds 1 to the array
dynamicArray.push(2);  // Adds 2 to the array




=================== 05. How does IF...ELSE statement work? How to define a Tenary operator? =============================
contract IfElseExample {
    function checkValue(uint value) public pure returns (string memory) {
        if (value < 10) {
            return "Value is less than 10";
        } else if (value == 10) {
            return "Value is 10";
        } else {
            return "Value is greater than 10";
        }
    }
}
---
contract TernaryOperatorExample {
    function getValue(uint value) public pure returns (string memory) {
        return value < 10 ? "Less than 10" : "10 or greater";
    }
}
=================== 06. FOR Loop =============================
contract ForLoopExample {
    function sumOfNumbers(uint n) public pure returns (uint) {
        uint sum = 0;
        for (uint i = 1; i <= n; i++) {
            sum += i;
        }
        return sum;
    }
}

=================== 07. How to define CONSTRUCT() ==========================================================
contract Token {
    string public name; // State variables
    constructor(string memory _name) {
        name = _name;
    }
}
=================== 08. How to return multiple values? ============================================
contract StructReturnExample {

    struct Person {     // Define a struct
        string name;
        uint age;
    }

    function getPerson() public pure returns (Person memory) {     // Function that returns a struct
        return Person("Alice", 30);
    }

    function useReturnedStruct() public pure returns (string memory, uint) {      // Function that uses the returned struct
        Person memory person = getPerson();
        return (person.name, person.age);
    }
=================== 09. Difference among Required, Revert, and Assert? =============================
Require Function: Enforces conditions that must be true for the function to proceed.
    Behavior:
    If the condition is true, the function continues execution.
    If the condition is false, the transaction is reverted. This means any state changes made within the function are undone, and the user gets refunded for the gas used up to that point.
    Provides an error message for debugging purposes.
    Use Cases:
    Input validation (e.g., ensuring positive values)
    Enforcing state invariants (e.g., user balance check before transfer)
    Access control checks (e.g., verifying sender address)
            Example:
               uint public value;
              function setValue(uint _newValue) public {
                // Enforce that the new value is greater than 0
                require(_newValue > 0, "New value must be greater than 0");
                value = _newValue;
              }

Revert: Can be used for general-purpose error handling.
        if (balance[msg.sender] < amount) {  revert("Insufficient balance"); }

Assert: Used for internal error checking and assumptions that should never be false in a well-written contract.

=================== 10. Difference between views and pure Function in solidity? =============================
VIEW: functions when you need to read data from the contract's storage(State Variables, Modifiers or Gas Consumption) without modifying it (e.g., getting a user's balance).
PURE: functions for calculations that only rely on the provided inputs and don't interact with the blockchain at all (e.g., mathematical operations or string manipulation).




--

