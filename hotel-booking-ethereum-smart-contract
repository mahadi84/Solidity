---------real ethereum smart contract for me for hotel booking in solidity.--------------

Solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HotelBooking {

  // Room struct to store room details
  struct Room {
    uint roomId; // Unique identifier for the room
    uint pricePerNight; // Price of the room per night (in Wei)
    bool available; // Availability status of the room
  }

  // Mapping to store rooms with roomId as key
  mapping(uint => Room) public rooms;

  // Address of the hotel owner who receives payments
  address payable public owner;

  // Event to be emitted after a successful booking
  event BookingConfirmed(uint roomId, address guest, uint checkIn, uint checkOut);

  constructor() public {
    owner = payable(msg.sender); // Set contract deployer as owner
  }

  // Function to add a new room
  function addRoom(uint roomId, uint pricePerNight) public onlyOwner {
    rooms[roomId] = Room(roomId, pricePerNight, true);
  }

  // Function to book a room
  function bookRoom(uint roomId, uint checkIn, uint checkOut) public payable {
    Room storage room = rooms[roomId];
    require(room.available, "Room is not available");
    require(msg.value >= room.pricePerNight * (checkOut - checkIn), "Insufficient payment");

    room.available = false;
    owner.transfer(msg.value); // Transfer payment to owner

    emit BookingConfirmed(roomId, msg.sender, checkIn, checkOut);
  }

  // Modifier to restrict functions only for the owner
  modifier onlyOwner() {
    require(msg.sender == owner, "Only owner can call this function");
    _;
  }
}

================================================

This contract defines a Room struct to store room details (ID, price, availability).
It uses a mapping to store rooms with the room ID as the key.
The owner variable stores the address of the hotel owner who receives booking payments.
An BookingConfirmed event is emitted after a successful booking.
The addRoom function allows the owner to add new rooms with a unique ID and price.
The bookRoom function lets users book a room by providing the ID, check-in, and check-out dates. It checks room availability and validates sufficient payment before booking.
The onlyOwner modifier restricts specific functions (like adding rooms) to the contract owner.
Important Note:

This is a simplified example for educational purposes. A real-world hotel booking system would likely include additional features like:

User accounts and authentication
Cancellation policy and refunds
Different room types and amenities
Integration with a user interface (web or mobile app)





-
