



Decentralized hotel booking platform where users can search for available rooms and book them securely using cryptocurrency.

We can use several mappings to store different types of data:

Hotel Information (mapping(address => Hotel))
Key: Hotel contract address (unique identifier for each hotel)
Value: A custom Hotel struct containing details like hotel name, location, amenities, etc.

Room Availability (mapping(address => mapping(uint => bool)))
Key1: Hotel contract address (same as above)
Key2: Room ID (unique identifier for each room type)
Value: Boolean value indicating room availability (true for available, false for booked)

Bookings (mapping(address => mapping(uint => Booking)))
Key1: User address (who made the booking)
Key2: Booking ID (unique identifier for each booking)
Value: A custom Booking struct containing details like room ID, check-in/out dates, price paid, etc.

------------------ CODE -----------------------
pragma solidity ^0.8.0;

contract HotelBooking {

    // Define structs for Hotel and Booking data
    struct Hotel {
        string name;
        address location;
        // ... other hotel details
    }

    struct Booking {
        uint roomId;
        uint checkIn;
        uint checkOut;
        uint price;
        // ... other booking details
    }

    // Mappings for hotel information, room availability, and bookings
    mapping(address => Hotel) public hotels;
    mapping(address => mapping(uint => bool)) public roomAvailability;
    mapping(address => mapping(uint => Booking)) public bookings;

    // Function to add a new hotel (for simplicity)
    function addHotel(string memory _name, address _location) public {
        hotels[msg.sender] = Hotel(_name, _location);
        // ... add logic to define room types and availability for this hotel
    }

    // Function to book a room (simplified logic)
    function bookRoom(address _hotelAddress, uint _roomId) public payable {
        require(roomAvailability[_hotelAddress][_roomId] == true, "Room is not available");
        // ... process payment and update booking and availability mappings
        roomAvailability[_hotelAddress][_roomId] = false;
        bookings[msg.sender][/* Booking ID generation */] = Booking(_roomId, /* check-in/out */, msg.value);
    }
}

----------------------------- Explanation :------------------------------------

This is a simplified example focusing on mappings. A complete booking system would involve additional functionalities like handling payments securely and implementing access control.

The code defines three mappings for hotels, room availability, and bookings.
Each mapping uses key-value pairs to store relevant data.

Functions like addHotel and bookRoom demonstrate how to interact with the mappings to manage hotel information and bookings.

----------------------Benefits of using Mappings:------------------------------

Efficient Data Storage: Mappings optimize storage for key-value data.
Quick Data Retrieval: Looking up data based on a unique identifier (key) is very efficient.
Scalability: The system can handle a large number of hotels and bookings.

------------------------- Limitations:------------------

Storing complex data structures within mappings can become expensive.
Modifying existing data within mappings can be complex.
Overall, mappings are a powerful tool for building efficient and scalable decentralized applications like hotel booking systems on the blockchain.





-
